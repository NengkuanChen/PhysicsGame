//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Game/Setting/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Editor"",
            ""id"": ""21cc4b47-40de-4d6f-9121-578a1c6b5756"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""2d4c2e3a-3cd6-4b9d-a58e-3bbd8e0e2fd5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""1f56414d-a877-46cd-9adf-2763d262ce06"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BallMove"",
                    ""type"": ""Value"",
                    ""id"": ""5c72d31c-5cda-4b0a-a284-27e09e7c1bae"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ac07559e-06c5-48b8-8bd4-4ff6023fea4d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7bb890f7-3d27-419c-83bc-81d3be623513"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""902a4a9b-5d4b-4b7c-accc-a247e10df952"",
                    ""path"": ""1DAxis(minValue=-45,maxValue=45)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BallMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f37fd7a3-92d9-4824-8fb9-31d7c343fe1c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BallMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""75ffcb7e-f796-45db-bde3-3ddb5e47a788"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BallMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""62e71c4f-2e59-4c4d-be28-1eab748eeca6"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""be62278a-709d-491c-b64a-6c9b5658a82c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BallMove"",
                    ""type"": ""Value"",
                    ""id"": ""8adf2a0e-8b6c-4684-9f39-0ad3d89c76fa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""29fd3789-de10-4ffe-9cef-7a872673c03b"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1512197-a379-4913-afe1-79d4f72ea2d5"",
                    ""path"": ""<AttitudeSensor>/attitude"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BallMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Editor
        m_Editor = asset.FindActionMap("Editor", throwIfNotFound: true);
        m_Editor_Fire = m_Editor.FindAction("Fire", throwIfNotFound: true);
        m_Editor_Aim = m_Editor.FindAction("Aim", throwIfNotFound: true);
        m_Editor_BallMove = m_Editor.FindAction("BallMove", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Tap = m_Player.FindAction("Tap", throwIfNotFound: true);
        m_Player_BallMove = m_Player.FindAction("BallMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Editor
    private readonly InputActionMap m_Editor;
    private IEditorActions m_EditorActionsCallbackInterface;
    private readonly InputAction m_Editor_Fire;
    private readonly InputAction m_Editor_Aim;
    private readonly InputAction m_Editor_BallMove;
    public struct EditorActions
    {
        private @PlayerInputAction m_Wrapper;
        public EditorActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_Editor_Fire;
        public InputAction @Aim => m_Wrapper.m_Editor_Aim;
        public InputAction @BallMove => m_Wrapper.m_Editor_BallMove;
        public InputActionMap Get() { return m_Wrapper.m_Editor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditorActions set) { return set.Get(); }
        public void SetCallbacks(IEditorActions instance)
        {
            if (m_Wrapper.m_EditorActionsCallbackInterface != null)
            {
                @Fire.started -= m_Wrapper.m_EditorActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_EditorActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_EditorActionsCallbackInterface.OnFire;
                @Aim.started -= m_Wrapper.m_EditorActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_EditorActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_EditorActionsCallbackInterface.OnAim;
                @BallMove.started -= m_Wrapper.m_EditorActionsCallbackInterface.OnBallMove;
                @BallMove.performed -= m_Wrapper.m_EditorActionsCallbackInterface.OnBallMove;
                @BallMove.canceled -= m_Wrapper.m_EditorActionsCallbackInterface.OnBallMove;
            }
            m_Wrapper.m_EditorActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @BallMove.started += instance.OnBallMove;
                @BallMove.performed += instance.OnBallMove;
                @BallMove.canceled += instance.OnBallMove;
            }
        }
    }
    public EditorActions @Editor => new EditorActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Tap;
    private readonly InputAction m_Player_BallMove;
    public struct PlayerActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_Player_Tap;
        public InputAction @BallMove => m_Wrapper.m_Player_BallMove;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Tap.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTap;
                @Tap.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTap;
                @Tap.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTap;
                @BallMove.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBallMove;
                @BallMove.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBallMove;
                @BallMove.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBallMove;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Tap.started += instance.OnTap;
                @Tap.performed += instance.OnTap;
                @Tap.canceled += instance.OnTap;
                @BallMove.started += instance.OnBallMove;
                @BallMove.performed += instance.OnBallMove;
                @BallMove.canceled += instance.OnBallMove;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IEditorActions
    {
        void OnFire(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnBallMove(InputAction.CallbackContext context);
    }
    public interface IPlayerActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnBallMove(InputAction.CallbackContext context);
    }
}
